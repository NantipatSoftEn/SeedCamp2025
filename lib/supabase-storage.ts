import { getSupabaseBrowserClient } from "./supabase"

export class SupabaseStorageService {
  private supabase = getSupabaseBrowserClient()
  private bucketName = "payment-slips"

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á bucket ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
  async ensureBucketExists(): Promise<boolean> {
    try {
      console.log("üîç Checking if bucket exists:", this.bucketName)

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ bucket ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const { data: buckets, error: listError } = await this.supabase.storage.listBuckets()

      if (listError) {
        console.error("‚ùå Error listing buckets:", listError)
        return false
      }

      const bucketExists = buckets?.some((bucket) => bucket.id === this.bucketName)
      console.log("üì¶ Bucket exists:", bucketExists)
      return true
    } catch (error) {
      console.error("‚ùå Unexpected error in ensureBucketExists:", error)
      return false
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö authentication ‡πÅ‡∏•‡∏∞ session
  private async ensureAuthenticated() {
    try {
      // Get session first
      const {
        data: { session },
        error: sessionError,
      } = await this.supabase.auth.getSession()

      if (sessionError) {
        console.error("‚ùå Session error:", sessionError)
        throw new Error(`Session error: ${sessionError.message}`)
      }

      if (!session) {
        throw new Error("No active session. Please log in again.")
      }

      // Get user
      const {
        data: { user },
        error: userError,
      } = await this.supabase.auth.getUser()

      if (userError) {
        console.error("‚ùå User error:", userError)
        throw new Error(`Authentication error: ${userError.message}`)
      }

      if (!user) {
        throw new Error("No authenticated user found. Please log in.")
      }

      console.log("‚úÖ Authentication verified:", {
        userId: user.id,
        email: user.email,
        sessionExpiry: session.expires_at,
      })

      return { user, session }
    } catch (error) {
      console.error("‚ùå Authentication check failed:", error)
      throw error
    }
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà unique ‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏±‡∏ß‡∏ï‡∏ô
  private generateFileName(uuid: string, fileExtension: string): string {
    const timestamp = new Date().toISOString().replace(/[:.]/g, "-")
    return `${uuid}_${timestamp}.${fileExtension}`
  }

  // Upload ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á Supabase Storage ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô payment_slips table
  async uploadPaymentSlip(
    file: File,
    nickname: string,
    firstName: string,
    lastName: string,
    personId: string,
  ): Promise<{ url: string; path: string; paymentSlipId: string } | null> {
    try {
      console.log("üîÑ Starting payment slip upload process...")

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö authentication ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
      const { user } = await this.ensureAuthenticated()

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á bucket
      const bucketReady = await this.ensureBucketExists()
      if (!bucketReady) {
        throw new Error("Could not create or access payment slips bucket. Please check Supabase permissions.")
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
      if (!file.type.startsWith("image/")) {
        throw new Error("Only image files are allowed")
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå (10MB)
      if (file.size > 10 * 1024 * 1024) {
        throw new Error("File size must be less than 10MB")
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
      const fileExtension = file.name.split(".").pop()?.toLowerCase() || "jpg"
      const fileName = this.generateFileName(personId, fileExtension)
      const filePath = `public/seedcamp2025/${fileName}`

      console.log("üìù Upload details:", {
        fileName,
        filePath,
        fileSize: `${(file.size / 1024 / 1024).toFixed(2)} MB`,
        fileType: file.type,
        person: { nickname, firstName, lastName, personId },
        user: { id: user.id, email: user.email },
      })

      // Upload ‡πÑ‡∏ü‡∏•‡πå
      const { data, error } = await this.supabase.storage.from(this.bucketName).upload(filePath, file, {
        cacheControl: "3600",
        upsert: true, // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°
      })

      if (error) {
        console.error("‚ùå Upload error:", error)
        throw new Error(`Upload failed: ${error.message}`)
      }

      // ‡∏î‡∏∂‡∏á public URL
      const { data: urlData } = this.supabase.storage.from(this.bucketName).getPublicUrl(filePath)

      if (!urlData.publicUrl) {
        throw new Error("Could not generate public URL for uploaded file")
      }

      console.log("üì§ File uploaded successfully, now saving to database...")

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô payment_slips table
      const insertData = {
        user_id: user.id,
        person_id: personId,
        path: filePath,
        original_name: file.name,
        file_size: file.size,
        mime_type: file.type,
      }

      console.log("üíæ Inserting payment slip record:", insertData)

      const { data: paymentSlipData, error: dbError } = await this.supabase
        .from("payment_slips")
        .insert(insertData)
        .select()
        .single()

      if (dbError) {
        console.error("‚ùå Database insert error:", dbError)
        console.error("‚ùå Insert data was:", insertData)

        // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏ñ‡πâ‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
        await this.supabase.storage.from(this.bucketName).remove([filePath])

        // Provide more specific error messages
        if (dbError.message.includes("row-level security")) {
          throw new Error(
            `Database permission error: ${dbError.message}\n\nThis might be due to RLS policies. Please check your Supabase RLS configuration.`,
          )
        } else {
          throw new Error(`Failed to save payment slip record: ${dbError.message}`)
        }
      }

      console.log("‚úÖ Payment slip record saved:", paymentSlipData)

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï payment_status ‡πÉ‡∏ô seedcamp_people table ‡πÄ‡∏õ‡πá‡∏ô "Paid"
      const { error: updateError } = await this.supabase
        .from("seedcamp_people")
        .update({
          payment_status: "paid",
          payment_slip: urlData.publicUrl,
          updated_at: new Date().toISOString(),
        })
        .eq("id", personId)

      if (updateError) {
        console.error("‚ùå Failed to update payment status:", updateError)
        console.warn("‚ö†Ô∏è Payment slip uploaded but payment status not updated")
      } else {
        console.log("‚úÖ Payment status updated to 'paid'")
      }

      console.log("‚úÖ Upload completed successfully:", {
        path: data.path,
        url: urlData.publicUrl,
        paymentSlipId: paymentSlipData.id,
      })

      return {
        url: urlData.publicUrl,
        path: data.path,
        paymentSlipId: paymentSlipData.id,
      }
    } catch (error) {
      console.error("‚ùå Error uploading payment slip:", error)
      throw error
    }
  }

  // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô database
  async deletePaymentSlip(fileUrl: string, personId?: string): Promise<boolean> {
    try {
      if (!fileUrl || !fileUrl.includes(this.bucketName)) {
        console.log("üîç Not a Supabase storage file, skipping deletion")
        return true // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô storage ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö authentication
      const { user } = await this.ensureAuthenticated()

      // ‡πÅ‡∏¢‡∏Å‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞ path ‡πÉ‡∏ô storage
      const urlParts = fileUrl.split("/")
      const pathIndex = urlParts.findIndex((part) => part === "payment-slips")
      if (pathIndex === -1) {
        console.warn("‚ö†Ô∏è Could not extract path from URL:", fileUrl)
        return false
      }

      const filePath = urlParts.slice(pathIndex + 1).join("/")

      console.log("üóëÔ∏è Deleting payment slip:", filePath)

      // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å payment_slips table ‡∏Å‡πà‡∏≠‡∏ô
      if (personId) {
        const { error: dbError } = await this.supabase
          .from("payment_slips")
          .delete()
          .eq("person_id", personId)
          .eq("path", filePath)

        if (dbError) {
          console.warn("‚ö†Ô∏è Could not delete payment slip record:", dbError.message)
        } else {
          console.log("‚úÖ Payment slip record deleted from database")
        }
      }

      // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å storage
      const { error } = await this.supabase.storage.from(this.bucketName).remove([filePath])

      if (error) {
        console.warn("‚ö†Ô∏è Could not delete old file:", error.message)
        return false
      }

      console.log("‚úÖ Old file deleted successfully")
      return true
    } catch (error) {
      console.warn("‚ö†Ô∏è Error deleting payment slip:", error)
      return false
    }
  }

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• payment slip ‡∏Ç‡∏≠‡∏á‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏à‡∏≤‡∏Å database
  async getPersonPaymentSlips(personId: string): Promise<
    Array<{
      id: string
      url: string
      path: string
      originalName: string
      uploadedAt: string
      fileSize: number
      mimeType: string
    }>
  > {
    try {
      console.log("üîç Searching for payment slips for person:", personId)

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö authentication
      const { user } = await this.ensureAuthenticated()

      console.log("üîç Searching for payment slips for person:", personId, "by user:", user.id)

      const { data, error } = await this.supabase
        .from("payment_slips")
        .select("*")
        .eq("person_id", personId)
        .order("uploaded_at", { ascending: false })

      if (error) {
        console.error("‚ùå Error fetching payment slips:", error)
        return []
      }

      const paymentSlips =
        data?.map((slip) => {
          const { data: urlData } = this.supabase.storage.from(this.bucketName).getPublicUrl(slip.path)
          return {
            id: slip.id,
            url: urlData.publicUrl,
            path: slip.path,
            originalName: slip.original_name,
            uploadedAt: slip.uploaded_at,
            fileSize: slip.file_size,
            mimeType: slip.mime_type,
          }
        }) || []

      console.log("üìÅ Found payment slips:", paymentSlips)
      return paymentSlips
    } catch (error) {
      console.error("‚ùå Error getting person payment slips:", error)
      return []
    }
  }

  // ‡∏î‡∏∂‡∏á URL ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å path
  getPublicUrl(path: string): string {
    const { data } = this.supabase.storage.from(this.bucketName).getPublicUrl(path)
    return data.publicUrl
  }

  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Storage ‡πÅ‡∏•‡∏∞ RLS
  async testConnection(): Promise<{ success: boolean; message: string }> {
    try {
      console.log("üß™ Testing Supabase Storage connection and RLS...")

      // Test 1: Authentication
      const { user } = await this.ensureAuthenticated()

      // Test 2: Storage connection
      const { data: buckets, error: storageError } = await this.supabase.storage.listBuckets()

      if (storageError) {
        return {
          success: false,
          message: `Storage connection failed: ${storageError.message}`,
        }
      }

      const bucketExists = buckets?.some((bucket) => bucket.id === this.bucketName)

      // Test 3: RLS policies by trying to insert/delete a test record
      const testRecord = {
        user_id: user.id,
        person_id: "test-person-id",
        path: "test/path.jpg",
        original_name: "test.jpg",
        file_size: 1024,
        mime_type: "image/jpeg",
      }

      const { data: insertData, error: insertError } = await this.supabase
        .from("payment_slips")
        .insert(testRecord)
        .select()
        .single()

      if (insertError) {
        return {
          success: false,
          message: `RLS test failed - cannot insert: ${insertError.message}`,
        }
      }

      // Clean up test record
      const { error: deleteError } = await this.supabase.from("payment_slips").delete().eq("id", insertData.id)

      if (deleteError) {
        console.warn("Could not clean up test record:", deleteError.message)
      }

      return {
        success: true,
        message: `All tests passed! Storage connected, bucket '${this.bucketName}' ${
          bucketExists ? "exists" : "will be created when needed"
        }, RLS policies working correctly for user: ${user.email}`,
      }
    } catch (error) {
      return {
        success: false,
        message: `Test failed: ${error instanceof Error ? error.message : "Unknown error"}`,
      }
    }
  }
}

// Export singleton instance
export const supabaseStorage = new SupabaseStorageService()
